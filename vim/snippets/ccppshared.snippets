###########################################################################
# Preprocessor

snippet once "random ifndef guards"
`!p
import uuid
if not snip.c:
  guid = '_' + uuid.uuid4().get_hex()
guard = t[1].replace(' ', '_').upper() + guid
snip.rv = '#ifndef %s\n#define %s' % (guard, guard)
`

$0/* ${1:`!p snip.rv = snip.basename.upper()`} */


#endif  /* `!p snip.rv = guard` */
endsnippet

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL}${0:${VISUAL/(.*)/(?1::code)/}}
#endif
endsnippet

###########################################################################
# Includes

snippet AEinc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"$0
endsnippet

snippet ilnc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"$0
endsnippet

snippet AEInc "#include <> (Inc)"
#include <${1:.h}>$0
endsnippet

snippet inc "#include <> (Inc)"
#include <${1:.h}>$0
endsnippet

###########################################################################
# Loops

snippet for
for (${2:size_t} ${1/([A-Za-z0-9_]+).*/$1/} = ${3:0}; ${1/([A-Za-z0-9_]+).*/$1/} < ${4:0}; ${1:i}) {
	$5
}$0
endsnippet

snippet fori
for (size_t ${1/([A-Za-z0-9_]+).*/$1/} = 0; ${1/([A-Za-z0-9_]+).*/$1/} < ${2:0}; ++${1:i}) {
	$3
}$0
endsnippet

snippet wh "while loop"
while (${1}) {
	$1
}$0
endsnippet

snippet do "do...while loop (do)"
do {
	$2
} while(${1});$0
endsnippet

###########################################################################
# Branches

snippet if "if .. (if)"
if (${1}) {
	$2
}$0
endsnippet

snippet eif "else if .. (elif)"
else if (${1}) {
	$2
}$0
endsnippet

snippet el "else .. (else)"
else {
	$1
}$0
endsnippet

snippet ife "if .. else (ife)"
if (${1}) {
	${2}
} else {
	${3}
}$0
endsnippet

###########################################################################
# stdio

snippet pf "printf ..."
printf("$1"$2);$0
endsnippet

snippet fpf "fprintf ..."
fprintf(${1:stderr}, "$2"$3);$0
endsnippet

snippet pfe "printf ..."
printf("$1\n"$2);$0
endsnippet

snippet fpfe "fprintf ..."
fprintf(${1:stderr}, "$2\n"$3);$0
endsnippet

###########################################################################
# structs

snippet AEst "struct"
struct ${1} {
	${0}
};
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${0}
};
endsnippet

###########################################################################
# functions

snippet AEfun "function" b
${1} ${2}(${3}) {
	$0
}
endsnippet

snippet f "function" b
${1:void} ${2:function_name}(${3}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::)/}}
}
endsnippet

snippet AEfund "function declaration" b
${1} ${2}(${3});
endsnippet

snippet fd "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

###########################################################################
# Misc

snippet main "main() (main)"
int main(int argc, char** argv) {
	$0
	return 0;
}
endsnippet

snippet cenum "Enumeration"
enum ${1:name} { $2 };$0
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};$0
endsnippet

snippet hx "hexy" w
{
	$0
}
endsnippet

snippet { "hexy" w
{
	$0
}
endsnippet
