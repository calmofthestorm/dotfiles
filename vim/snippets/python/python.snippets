# My snippets are based on the default Python snippets with a great deal of
# boilerplate taken out, along with functions I do not use.  #I strongly suggest
# preferring the default Python snippets to mine as a starting point for
# customizing your own.

#! header
snippet #! "Shebang header for python scripts" b
#!/usr/bin/env python
# encoding: utf-8
$0
endsnippet


snippet ifmain "ifmain" b
if __name__ == '__main__':
	${1:main()}$0
endsnippet


snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:pass}
endsnippet


snippet fori "for loop xrange" b
for ${1:item} in xrange($2):
	${3:pass}
endsnippet


##########
# COMMON #
##########

# The smart def and smart class snippets use a global option called
# "g:ultisnips_python_style" which, if set to "doxygen" will use doxygen
# style comments in docstrings.

global !p

NORMAL  = 0x1
DOXYGEN = 0x2
SPHINX  = 0x3

SINGLE_QUOTES = 0x1
DOUBLE_QUOTES = 0x2

def get_quoting_style(snip):
	style = snip.opt("g:ultisnips_python_quoting_style", "double")
	if style == 'single':
		return SINGLE_QUOTES
	return DOUBLE_QUOTES


def triple_quotes(snip):
	if get_quoting_style(snip) == SINGLE_QUOTES:
		return "'''"
	return '"""'


def get_style(snip):
	style = snip.opt("g:ultisnips_python_style", "normal")

	if    style == "doxygen": return DOXYGEN
	elif  style == "sphinx": return SPHINX
	else: return NORMAL


def format_return(style):
	if style == DOXYGEN:
		return "@return: @todo"
	elif style in (NORMAL, SPHINX):
		return ":returns: @todo"


endglobal

########################################
# Class & Special Method Name Snippets #
########################################

snippet c "class" b
class ${1}(object):
	$0
endsnippet


snippet ci "subclass" b
class ${1}(${2:object}):
	$0
endsnippet


snippet cd "class with docstrings" b
class ${1}(object):
	`!p snip.rv = triple_quotes(snip)`${2}`!p snip.rv = triple_quotes(snip)`

	def __init__(self$3):
		`!p snip.rv = triple_quotes(snip)`${4}`!p snip.rv = triple_quotes(snip)`
		$0
endsnippet


snippet cid "subclass with docstrings" b
class ${1}(${2:object}):
	`!p snip.rv = triple_quotes(snip)`${3}`!p snip.rv = triple_quotes(snip)`

	def __init__(self$4):
		`!p snip.rv = triple_quotes(snip)`${5}`!p snip.rv = triple_quotes(snip)`
		$0
endsnippet


snippet df "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2}):
	`!p snip.rv = triple_quotes(snip)`${4}`!p snip.rv = triple_quotes(snip)`
	${0:pass}
endsnippet


snippet d "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2}):
	${0:pass}
endsnippet


snippet f "function" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2}):
	${0:pass}
endsnippet


snippet fd "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2}):
	`!p snip.rv = triple_quotes(snip)`${4}`!p snip.rv = triple_quotes(snip)`
	${0:pass}
endsnippet


# . -> self.
# doesn't expand when there is a word in front
snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet


snippet fr "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet


####################
# If / Else / Elif #
####################


snippet if "If" b
if ${1:condition}:
	${2:pass}
endsnippet


snippet ife "If / Else" b
if ${1:condition}:
	${2:pass}
else:
	${3:pass}
endsnippet


snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:pass}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet


##########################
# Try / Except / Finally #
##########################
snippet try "Try / Except" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
endsnippet


snippet try "Try / Except / Else" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
else:
	${5:pass}
endsnippet


snippet try "Try / Except / Finally" b
try:
	${1:pass}
except ${2:Exception}, ${3:e}:
	${4:raise $3}
finally:
	${5:pass}
endsnippet


snippet try "Try / Except / Else / Finally" b
try:
	${1:pass}
except${2: ${3:Exception}, ${4:e}}:
	${5:raise}
else:
	${6:pass}
finally:
	${7:pass}
endsnippet


#####################
# Debugging
#####################


snippet pdb "Set PDB breakpoint" b
import pdb; pdb.set_trace()
endsnippet


snippet ipdb "Set IPDB breakpoint" b
import ipdb; ipdb.set_trace()
endsnippet


snippet pudb "Set PUDB breakpoint" b
import pudb; pudb.set_trace()
endsnippet


# vim:ft=snippets:
